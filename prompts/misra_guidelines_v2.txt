MISRA Code guidelines formatted with rule numbers:

Code Rules:
- Rule 1: Code MUST follow MISRA C Coding Guidelines.
Style Rules:
- Rule 2: Use 4 spaces for indentation; do not use tabs.
- Rule 3: Aim for a maximum line length of 76 columns.
- Rule 4: Place the `*` directly next to the variable name for pointers (e.g., `int *ptr`).
- Rule 5: Align variable names where possible and match the style of surrounding code.
- Rule 6: Enclose the statement forming the body of control structures (`if`, `else if`, `else`, `while`, `do ... while`, `for`) in braces.
- Rule 7: An `if (expression)` construct must be followed by a compound statement; `else` must be followed by a compound statement or another `if` statement.
- Rule 8: Terminate all `if ... else if` constructs with an `else` clause.
- Rule 9: A pointer resulting from arithmetic on a pointer operand must address an element of the same array as that pointer operand.
- Rule 10: Do not use the `sizeof` operator on function parameters declared as "array of type".
- Rule 11: Do not use the Standard Library function `system` from `<stdlib.h>`.
- Rule 12: Follow alignment (`<stdalign.h>`) and no-return functions (`<stdnoreturn.h>`) rules.
- Rule 13: Do not use type generic expressions (`_Generic`).
- Rule 14: Avoid using obsolescent language features.
Code Practices:
- Rule 15: Declare all variables at the beginning of a block.
- Rule 16: Avoid using global variables; prefer static variables.
- Rule 17: Use only approved control structures; avoid `goto` statements.
- Rule 18: Ensure all loops have a fixed upper limit.
- Rule 19: Keep functions short and focused on a single task.
- Rule 20: Use function prototypes and limit the number of parameters.
- Rule 21: Use only standard MISRA-compliant data types.
- Rule 22: Avoid dynamic memory allocation (`malloc`, `calloc`, `free`).
Commenting:
- Rule 23: Use consistent comment styles:
  - Single-line: `/* Comment */`
  - Multi-line:
    ```
    /*
     * Multi-line comment
     * continues here.
     */
    ```
- Rule 24: Describe the intent, not the action; use full sentences, correct grammar, and spelling. Avoid non-obvious abbreviations.
Code Formatting:
- Rule 25: Use K&R style for bracing; always brace even single-line statements.
- Rule 26: Use a single exit point in functions, using `goto` for error handling.
- Rule 27: Wrap non-trivial macros in `do {...} while (0)`.
- Rule 28: Avoid magic numbers; use enumerations or constants.
- Rule 29: Define bitfield widths for `BOOL`, enums, and flags to ensure proper alignment.